{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["app","state","scoreBoard","topScore","currentScore","picsArray","id","url","guessesSoFar","handleClick","console","log","includes","alert","setState","shuffledArray","a","j","x","i","length","Math","floor","random","shuffle","newGuessesSoFar","concat","newTopScore","didYouWin","this","styles","picStyle","height","self","map","singlePic","src","style","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NA2GeA,E,2MAxGbC,MAAQ,CACNC,WAAY,EACZC,SAAU,EACVC,aAAc,EACdC,UAAW,CACT,CACEC,GAAI,EACJC,IACE,2EAEJ,CACED,GAAI,EACJC,IACE,2EAEJ,CACED,GAAI,EACJC,IACE,4EAGNC,aAAc,I,EAIhBC,YAAc,SAAAH,GAaZ,GAZAI,QAAQC,IAAI,2BAWZD,QAAQC,IAAI,gBAAiB,EAAKV,MAAMO,aAAaI,SAASN,IAC1D,EAAKL,MAAMO,aAAaI,SAASN,GACnCO,MAAM,aACN,EAAKC,SAAS,CACZN,aAAc,GACdJ,aAAc,QAEX,CACLM,QAAQC,IAAI,mBACZ,IACII,EApBN,SAAiBC,GACf,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC5BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAKH,EAAEC,GACTD,EAAEC,GAAKC,EAET,OAAOF,EAYaQ,CADL,EAAKvB,MAAMI,WAEtBoB,EAAkB,EAAKxB,MAAMO,aAAakB,OAAOpB,GACjDqB,EAAc,EAAK1B,MAAME,SACzBwB,GAAe,EAAK1B,MAAMG,aAAe,IAC3CuB,EAAc,EAAK1B,MAAMG,aAAe,GAE1C,EAAKU,SAAS,CACZT,UAAWU,EACXP,aAAciB,EACdtB,SAAUwB,EACVvB,aAAc,EAAKH,MAAMG,aAAe,M,EAM9CwB,UAAY,WACN,EAAK3B,MAAMO,aAAaY,SAAW,EAAKnB,MAAMI,UAAUe,SAC1DP,MAAM,YACN,EAAKC,SAAS,CACZN,aAAc,GACdJ,aAAc,M,wEAMlByB,KAAKD,YACLlB,QAAQC,IAAIkB,KAAK5B,OACjB,IAAI6B,EAAS,CACXC,SAAU,CACRC,OAAQ,UAGRC,EAAOJ,KACX,OACE,6BACE,8CACkBA,KAAK5B,MAAMG,aAD7B,gBACwD,IACrDyB,KAAK5B,MAAME,UAEb0B,KAAK5B,MAAMI,UAAU6B,IAAI,SAASC,GACjC,OACE,yBACEC,IAAKD,EAAU5B,IACf8B,MAAOP,EAAOC,SACdO,QAAS,WACPL,EAAKxB,YAAY0B,EAAU7B,c,GA/FzBiC,IAAMC,WCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4cb7c177.chunk.js","sourcesContent":["import React from \"react\";\n\nclass app extends React.Component {\n  state = {\n    scoreBoard: 0,\n    topScore: 0,\n    currentScore: 0,\n    picsArray: [\n      {\n        id: 1,\n        url:\n          \"https://i.pinimg.com/564x/b7/34/7f/b7347f3ab888c0df00096f4956b934d9.jpg\"\n      },\n      {\n        id: 2,\n        url:\n          \"https://i.pinimg.com/564x/a9/71/63/a971636819153ba259739550f8016718.jpg\"\n      },\n      {\n        id: 3,\n        url:\n          \"https://i.pinimg.com/564x/78/bf/1c/78bf1c26d54e6c5b363f419321fe2b5f.jpg\"\n      }\n    ],\n    guessesSoFar: []\n  };\n\n  //The portion that handles the clicks of your images.\n  handleClick = id => {\n    console.log(\"youÂ´ve been clicked!\");\n    function shuffle(a) {\n      var j, x, i;\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n      return a;\n    }\n    console.log(\"includes test\", this.state.guessesSoFar.includes(id));\n    if (this.state.guessesSoFar.includes(id)) {\n      alert(\"you lose!\");\n      this.setState({\n        guessesSoFar: [],\n        currentScore: 0\n      });\n    } else {\n      console.log(\"keep on trying!\");\n      var oldArray = this.state.picsArray;\n      var shuffledArray = shuffle(oldArray);\n      var newGuessesSoFar = this.state.guessesSoFar.concat(id);\n      var newTopScore = this.state.topScore;\n      if (newTopScore <= this.state.currentScore + 1) {\n        newTopScore = this.state.currentScore + 1;\n      }\n      this.setState({\n        picsArray: shuffledArray,\n        guessesSoFar: newGuessesSoFar,\n        topScore: newTopScore,\n        currentScore: this.state.currentScore + 1\n        //scoreBoard: this.state.scoreBoard + 1\n      });\n    }\n  };\n\n  didYouWin = () => {\n    if (this.state.guessesSoFar.length === this.state.picsArray.length) {\n      alert(\"You Win!\");\n      this.setState({\n        guessesSoFar: [],\n        currentScore: 0\n      });\n    }\n  };\n\n  render() {\n    this.didYouWin();\n    console.log(this.state);\n    var styles = {\n      picStyle: {\n        height: \"300px\"\n      }\n    };\n    var self = this;\n    return (\n      <div>\n        <h1>\n          Current Score: {this.state.currentScore} - Top Score:{\" \"}\n          {this.state.topScore}\n        </h1>\n        {this.state.picsArray.map(function(singlePic) {\n          return (\n            <img\n              src={singlePic.url}\n              style={styles.picStyle}\n              onClick={() => {\n                self.handleClick(singlePic.id);\n              }}\n            ></img>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}